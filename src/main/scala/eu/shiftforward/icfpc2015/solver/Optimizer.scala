package eu.shiftforward.icfpc2015.solver

import eu.shiftforward.icfpc2015.GameState
import eu.shiftforward.icfpc2015.model._
import spray.json._

import scala.io.Source
import scala.util.Random

case class OptimizationResult(score: Long, parameters: Array[Double])

trait Optimizer {
  val hyperparametersLenght = 6 * 8

  protected def score(filename: String, hp: Array[Double]) = {
    val input = Source.fromFile(filename).mkString.parseJson.convertTo[Input]
    val solver = new SmartSolver(hp, debugOnGameOver = false)

    val score = input.sourceSeeds.map { seed =>
      val units = input.orderedUnitsBySeed(seed)
      val grid = Grid(input.width, input.height).filled(input.filled: _*)
      val powerPhrases = PowerPhrase.knownPhrases

      val gameState = GameState(grid, units, powerPhrases)
      val solution = solver.play(gameState).toList
      gameState.nextState(solution).score.get.currentScore
    }.sum / input.sourceSeeds.size

    OptimizationResult(score, hp)
  }

  def optimize(filename: Array[String], maxIter: Int): OptimizationResult
}

object RandomOptimizer extends Optimizer {
  def optimize(filename: Array[String], maxIter: Int) = {
    def optimizeAux(iter: Int, bestModel: OptimizationResult): OptimizationResult = iter match {
      case 0 => bestModel
      case i =>
        val hp = Array.fill(hyperparametersLenght)((Random.nextDouble() - 0.5) * 2)
        val newModel = score(filename(0), hp)
        if (newModel.score > bestModel.score) optimizeAux(i - 1, newModel)
        else optimizeAux(i - 1, bestModel)
    }
    optimizeAux(maxIter, score(filename(0), Array.fill(hyperparametersLenght)(0.5)))
  }
}

object GeneticOptimizer extends Optimizer {
  type Specimen = Array[Double]
  type Gene = Double

  // Preserve previous runs...
  val knowledgePool = List[Specimen](

    /* problem  0  (6733) */ Array(0.15, 0.9, -0.204, -0.205, 0.966, -0.69, 0.923, 0.911, 0.97, -0.629, 0.828, 0.666, 0.62, 0.16, 0.06, -0.66, -0.8, 0.275, 0.394, 0.2, -0.854, -0.46, -0.919, 0.7, 0.896, 0.047, -0.32, -0.052, 0.358, 0.776, 0.685, 0.97, -0.77, -0.54, 0.385, 0.397, -0.49, -0.24, 0.4, -0.99, 0.88, -0.23, -0.46, 0.453, 0.94, -0.355, 0.631, 0.486),
    /* problem  1  (3662) */ Array(0.773, 0.302, -0.164, -0.662, 0.63, -0.543, 0.509, 0.073, 0.219, -0.981, -0.985, 0.64, 0.721, 0.061, -0.892, -0.773, -0.113, 0.844, -0.234, 0.806, 0.406, 0.273, -0.158, 0.727, 0.363, -0.893, 0.214, -0.176, 0.683, -0.54, 0.041, 0.63, 0.022, -0.915, 0.881, -0.135, 0.018, 0.423, 0.638, -0.294, 0.884, -0.067, -0.216, -0.819, -0.819, 0.392, 0.0, -0.209),
    /* problem  2  (6469) */ Array(-0.23, -0.5, 0.09, -0.34, -0.03, -0.42, 0.18, -0.19, 0.08, -0.07, -0.17, 0.19, 0.7, 0.18, 0.81, 0.17, -0.39, -0.9, -0.11, -0.49, 0.45, -0.06, -0.02, 0.18, 0.07, -0.64, -0.73, -0.14, -0.28, 0.62, -0.69, -0.72, -0.02, 0.08, -0.06, -0.75, 0.64, 0.34, 0.47, 0.97, -0.25, 0.28, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
    /* problem  3  (4189) */ Array(0.85, -0.36, 0.78, -0.21, 0.46, 0.84, -0.98, 0.2, 0.06, 0.09, -0.72, 0.94, -0.34, 0.56, -0.23, 0.8, -0.2, -0.1, 0.75, -0.09, 0.65, -0.72, -0.05, 0.64, 0.83, 0.08, 0.2, 0.16, 0.49, -0.65, -0.05, 0.24, -0.72, -0.51, 0.25, 0.5, 0.17, 0.99, 0.61, -0.21, 0.31, 0.88, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
    /* problem  4  (4416) */ Array(-0.853, 0.923, 0.316, 0.978, 0.27, 0.869, 0.95, 0.034, 0.886, 0.159, -0.969, -0.004, 0.819, 0.16, 0.048, 0.427, -0.395, 0.87, 0.032, -0.554, -0.017, -0.861, -0.78, -0.41, 0.625, 0.08, 0.268, 0.787, 0.853, 0.517, 0.36, -0.607, -0.637, -0.54, 0.733, 0.021, 0.292, 0.57, 0.913, 0.74, 0.712, 0.05, 0.1, 0.21, 0.604, -0.476, -0.549, -0.593),
    /* problem  5  (3575) */ Array(-0.026, 0.46, -0.477, 0.452, -0.19, 0.009, 0.73, -0.292, -0.266, -0.965, 0.418, -0.41, 0.39, 0.492, -0.582, -0.424, -0.02, 0.428, 0.673, 0.583, 0.299, -0.16, -0.546, -0.653, -0.862, -0.39, 0.318, 0.41, 0.738, -0.761, 0.062, -0.169, 0.019, -0.821, -0.06, 0.099, 0.63, 0.17, 0.57, 0.87, -0.873, 0.41, 0.989, 0.755, 0.476, -0.765, 0.55, 0.745),
    /* problem  6  (6151) */ Array(
      0.23, -0.88, -0.87, 0.55, 0.15, -0.6,
      0.28, 0.47, -0.05, -0.89, -0.17, 0.93,
      -0.18, 0.04, -0.43, -0.42, -0.18, -0.38,
      -0.27, 0.13, 0.76, -0.83, 0.74, -0.54,
      0.26, 0.69, -0.4, 0.51, -0.85, 0.05,
      -0.5, 0.54, 0.02, -0.14, -0.06, -0.61,
      -0.82, 0.34, 0.91, -0.49, -0.97, 0.69,
      0, 0, 0, 0, 0, 0),
    /* problem  7  (3782) */ Array(-0.786, 0.8, -0.439, -0.884, -0.877, -0.371, 0.509, -0.932, 0.217, -0.07, 0.163, 0.87, -0.77, 0.5, 0.06, 0.82, -0.25, 0.999, 0.007, 0.21, 0.95, -0.9, 0.159, 0.33, 0.67, -0.64, -0.24, -0.915, 0.32, 0.319, 0.781, -0.652, -0.676, 0.09, 0.2, 0.271, -0.11, 0.96, 0.341, 0.136, 0.897, -0.162, 0.797, 0.735, 0.937, -0.625, -0.766, 0.923),
    /* problem  8 (12792) */ Array(0.6, -0.2, -0.08, -0.54, 0.92, -0.49, 0.72, -0.939, 0.85, 0.59, -0.459, 0.207, -0.356, 0.92, -0.13, -0.678, -0.51, 0.39, -0.998, -0.151, 0.942, 0.294, 0.254, -0.7, -0.98, 0.695, -0.48, 0.84, -0.39, 0.44, 0.88, 0.57, 0.65, -0.384, 0.908, 0.132, -0.96, -0.412, -0.121, 0.201, 0.41, 0.91, 0.78, 0.0, 0.0, -0.472, -0.3, 0.0),
    /* problem  9  (3545) */ Array(0.587, 0.228, 0.828, -0.54, 0.793, -0.097, 0.833, 0.293, 0.481, 0.422, -0.539, 0.634, 0.977, 0.183, -0.32, -0.897, 0.252, 0.607, -0.491, -0.449, -0.581, -0.774, -0.439, -0.379, 0.218, 0.681, -0.995, -0.047, -0.914, -0.34, -0.078, -0.646, 0.476, -0.729, -0.669, 0.006, 0.111, -0.534, 0.43, 0.891, 0.096, -0.328, -0.963, 0.27, 0.338, -0.977, -0.742, 0.583),
    /* problem 10  (4192) */ Array(-0.54, -0.01, -0.6, -0.81, 0.39, -0.75, -0.17, -0.19, -0.21, 0.17, 0.13, -0.74, 0.31, 0.16, 0.14, -0.11, -0.51, 0.7, 0.79, 0.14, 0.1, -0.82, 0.78, 0.9, -0.66, -0.5, -0.8, 0.74, -0.91, -0.82, 0.44, -0.66, 0.54, -0.73, 0.43, -0.71, -0.91, 0.57, 0.82, 0.07, 0.37, -0.71, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
    /* problem 11  (3180) */ Array(
      -0.68, -0.96, 0.59, 0.9, -0.66, -0.98,
      0.62, -0.88, 0.31, -0.74, -0.78, -0.19,
      0.93, 0.03, -0.43, -0.72, -0.07, 0.54,
      -0.22, 0.16, 0.73, -0.27, 0.35, 0.33,
      -0.3, -0.92, 0.92, -0.85, -0.85, -0.48,
      -0.88, -0.07, -0.88, -0.54, -0.63, 0.36,
      0.52, 0.73, -0.27, -0.75, -0.9, 0.41,
      0, 0, 0, 0, 0, 0),
    /* problem 12  (6481) */ Array(
      -0.46, -0.88, -0.08, -0.68, 0.78, -0.49,
      -0.02, -0.11, 0.16, 0.59, -0.33, 0.56,
      0.62, 0.92, -0.13, -0.66, -0.51, 0.1,
      0.04, 0.36, 0.45, -0.09, 0.92, 0.27,
      -0.51, -0.38, -0.98, -0.46, 0.82, -0.34,
      0.04, -0.95, 0.65, -0.67, 0.56, -0.4,
      0.22, -0.24, 0.71, -0.91, 0.37, -0.65,
      0, 0, 0, 0, 0, 0),
    /* problem 13  (2573) */ Array(0.55, -0.15, 0.25, -0.93, -0.173, -0.232, 0.95, -0.03, -0.96, -0.89, 0.236, 0.762, -0.77, 0.49, 0.27, -0.43, -0.51, -0.7, 0.678, -0.88, 0.2, 0.294, 0.74, 0.686, 0.45, -0.76, -0.8, 0.84, -0.3, 0.05, 0.07, -0.1, -0.65, -0.384, 0.2, 0.271, -0.718, 0.639, -0.001, -0.866, 0.897, 0.93, 0.638, 0.0, 0.0, 0.0, 0.142, 0.0),
    /* problem 14  (6594) */ Array(
      -0.21, 0.02, -0.83, -0.98, -0.68, 0.94,
      -0.61, 0.19, 0.34, -0.22, -0.5, -0.03,
      -0.46, 0.79, -0.46, 0.06, 0.12, 0.89,
      0.41, 0.25, 0.05, -0.75, -0.98, 0.93,
      0.4, 0.78, -0.06, -0.99, 0.32, 0.03,
      0.98, 0.97, 0.14, 0.37, -0.99, -0.58,
      -0.97, -0.24, 0.03, -0.71, 0.47, -0.53,
      0, 0, 0, 0, 0, 0),
    /* problem 15  (4116) */ Array(
      0.38, -0.88, -0.77, 0.66, -0.93, -0.79,
      0.08, -0.35, -0.53, -0.59, -0.38, -0.37,
      0.64, 0.84, 0.44, -0.1, -0.02, -0.33,
      0.91, -0.97, 0.46, -0.62, -0.85, 0.95,
      -0.51, -0.45, -0.95, 0.41, 0.36, -0.06,
      -0.18, -0.75, -0.93, 0.61, -0.06, -0.33,
      -0.48, 0.17, -0.23, 0.87, -0.97, 0.41,
      0, 0, 0, 0, 0, 0),
    /* problem 16  (7568) */ Array(-0.23, 0.46, 0.34, 0.38, 0.92, -0.25, 0.35, 0.9, 0.66, 0.54, 0.62, 0.61, -0.51, 0.53, 0.51, -0.12, 0.16, -0.7, 0.56, -0.54, 0.76, -0.42, 0.57, 0.7, 0.45, -0.39, -0.6, 0.0, -0.3, 0.27, 0.11, 0.5, -0.56, -0.28, -0.25, -0.08, 0.64, 0.59, 0.57, 0.51, -0.77, -0.71, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
    /* problem 17  (5300) */ Array(0.44, -0.71, 0.31, 0.79, 0.92, -0.95, 0.72, 0.12, 0.14, -0.02, 0.13, 0.84, -0.28, -0.36, 0.14, 0.87, 0.28, 0.39, -0.93, 0.59, 0.89, -0.54, 0.58, 0.33, 0.98, -0.76, -0.9, 0.84, -0.32, 0.44, 0.36, 0.52, 0.88, -0.55, -0.99, 0.31, -0.11, -0.44, -0.32, -0.47, 0.41, 0.91, 0.59, 0.49, 0.28, -0.51, 0.2, 0.89),
    /* problem 18  (8596) */ Array(-0.881, -0.473, 0.957, -0.393, 0.92, 0.48, -0.1, -0.799, 0.38, -0.035, -0.44, -0.077, -0.518, 0.752, -0.882, -0.396, -0.387, 0.474, 0.41, -0.973, 0.266, 0.813, 0.698, 0.471, 0.307, 0.71, -0.111, 0.006, 0.332, 0.18, -0.26, -0.136, -0.525, 0.34, -0.422, 0.371, 0.64, -0.219, -0.217, -0.411, -0.005, -0.337, 0.0, 0.453, 0.171, -0.65, 0.287, 0.861),
    /* problem 19  (5128) */ Array(0.613, 0.679, 0.493, 0.965, 0.831, 0.714, -0.739, 0.893, 0.215, -0.79, -0.694, -0.216, 0.966, 0.763, 0.132, 0.065, -0.387, 0.819, 0.759, -0.051, 0.196, 0.335, 0.369, 0.939, 0.403, -0.133, -0.213, -0.048, -0.823, 0.531, 0.174, 0.085, -0.698, -0.381, -0.924, 0.406, -0.888, 0.774, 0.089, -0.065, -0.8, -0.662, 0.248, 0.735, 0.251, 0.049, 0.528, -0.104),
    /* problem 20  (6018) */ Array(0.5, -0.15, -0.87, -0.06, 0.89, -0.35, 0.95, 0.47, 0.76, 0.05, -0.89, 0.71, -0.13, 0.01, 0.05, 0.38, 0.06, 0.22, 0.04, -0.18, 0.45, 0.32, 0.92, 0.18, -0.02, -0.74, 0.91, 0.28, 0.67, 0.3, 0.72, -0.85, -0.65, -0.96, 0.75, 0.89, -0.4, 0.34, 0.37, 0.25, -0.31, 0.97, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
    /* problem 21  (1434) */ Array(-0.46, 0.49, -0.87, -0.84, -0.24, 0.01, 0.4, 0.64, -0.81, -0.46, -0.21, -0.45, -0.04, 0.1, 0.42, -0.36, -0.37, 0.41, 0.56, 0.13, 0.34, -0.95, -0.52, 0.69, 0.62, 0.2, -0.46, 0.34, -0.07, -0.71, -0.81, -0.07, -0.52, 0.62, -0.72, -0.83, 0.6, -0.97, -0.46, 0.25, -0.37, -0.5, -0.4, 0.24, -0.79, -0.2, -0.87, 0.87),
    /* problem 22  (2300) */ Array(-0.208, 0.256, -0.646, 0.727, 0.421, -0.724, -0.367, 0.893, 0.529, -0.945, 0.127, 0.38, 0.927, -0.89, -0.94, 0.391, -0.413, 0.3, -0.391, -0.015, -0.224, -0.602, -0.606, 0.899, -0.073, -0.847, -0.723, 0.553, 0.29, 0.884, 0.28, 0.25, -0.686, -0.001, -0.924, 0.295, 0.538, -0.259, 0.787, 0.276, 0.275, -0.271, 0.794, 0.755, -0.25, 0.481, 0.433, 0.648),
    /* problem 23  (1116) */ Array(0.217, -0.24, -0.259, 0.85, -0.17, -0.645, 0.393, 0.041, 0.506, -0.073, 0.432, 0.104, -0.523, -0.466, -0.838, 0.786, -0.916, -0.342, -0.916, -0.872, 0.703, -0.324, 0.719, 0.948, 0.857, 0.451, -0.655, 0.393, 0.93, -0.734, 0.252, -0.637, 0.107, 0.851, -0.25, -0.279, 0.601, 0.486, 0.174, 0.326, -0.28, -0.081, 0.255, 0.634, -0.096, -0.974, 0.645, 0.978),
    /* problem 24 (77000/ */ Array(-0.23, -0.01, -0.6, -0.93, 0.27, 0.97, -0.69, -0.83, 0.85, -0.42, 0.35, -0.24, 0.38, 0.16, -0.46, -0.85, 0.58, 0.87, 0.32, 0.98, 0.26, -0.31, -0.95, -0.7, -0.98, -0.44, -0.48, -0.16, -0.3, -0.91, 0.07, -0.66, 0.88, -0.96, -0.07, -0.06, -0.96, 0.57, 1.0, 0.74, -0.71, 0.93, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),

    /* meta 0 - 6 (26416 out of 29805) */ Array(
      0.02, 0.13, -0.87, -0.95, 0.44, 0.15,
      -0.85, 0.67, 0.38, -0.18, -0.09, 0.54,
      0.2, 0.33, -0.43, 0.95, 0.16, 0.87,
      0.61, 0.22, 0.73, -0.68, -0.7, 0.27,
      -0.28, 0.4, -0.73, 0.39, -0.88, -0.48,
      0.81, -0.02, 0.47, -0.99, -0.09, 0.03,
      -0.93, -0.8, 0.48, -0.21, -0.15, 0.41,
      0, 0, 0, 0, 0, 0),
    /* meta 7 -13 (23732 out of 26853) */ Array(
      0.6, -0.2, -0.1, -0.54, -0.29, -0.79,
      -0.21, -0.11, 0.46, -0.79, -0.61, 0.54,
      0.62, 0.04, 0.66, -0.21, 0.82, 0.7,
      0.8, -0.26, 0.58, -0.84, -0.02, -0.98,
      -0.51, -0.38, -0.55, -0.21, -0.39, -0.06,
      0.88, 0.57, -0.93, -0.95, -0.5, 0.99,
      0.66, 0.84, 0.8, 0.74, 0.62, 0.44,
      0, 0, 0, 0, 0, 0),
    /* meta 15-21 (22221 out of 22341) */ Array(
      -0.34, -0.88, 0.09, 0.15, 0.6, -0.21,
      0.73, 0.47, -0.96, 0.42, 0.35, -0.28,
      0.45, -0.07, 0.65, -0.43, 0.83, 0.94,
      -0.31, 0.98, 0.62, -0.16, -0.53, 0.93,
      -0.36, -0.5, 0.92, -0.09, -0.0, 0.06,
      -0.73, -0.1, -0.16, 0.42, -0.09, -0.49,
      -0.82, -0.36, 0.67, -0.49, 0.08, 0.64,
      0, 0, 0, 0, 0, 0),

    /* fast problems (39729) */ Array(-0.23, -0.01, -0.6, -0.93, 0.27, 0.97, -0.69, -0.83, 0.85, -0.42, 0.35, -0.24, 0.38, 0.16, -0.46, -0.85, 0.58, 0.87, 0.32, 0.98, 0.26, -0.31, -0.95, -0.7, -0.98, -0.44, -0.48, -0.16, -0.3, -0.91, 0.07, -0.66, 0.88, -0.96, -0.07, -0.06, -0.96, 0.57, 1.0, 0.74, -0.71, 0.93, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),

    /* seed A */ Array(0.39, 0.46, 0.81, 0.99, 0.19, -0.38, -0.35, -0.45, 0.75, 0.51, -0.77, 0.87, 0.05, -0.09, -0.01, 0.46, -0.9, 0.07, -0.01, -0.12, 0.71, -0.93, 0.77, -0.7, -0.32, 0.71, 0.9, -0.13, -0.37, -0.34, -0.77, 0.09, 0.0, -0.1, -0.22, -0.17, 0.98, 0.39, 0.3, -0.06, -0.45, 0.33, 0.75, 0.9, 0.94, -0.62, -0.4, 0.93),
    /* seed B */ Array(-0.3, 0.44, -0.23, -0.89, 0.78, 0.49, -0.78, 0.75, 0.32, -0.03, 0.06, 0.64, -0.28, -0.21, -0.19, 0.46, -0.76, -0.13, 0.64, 0.44, 0.29, -0.73, 0.39, 0.34, -0.3, 0.81, 0.09, -0.88, -0.71, -0.09, 0.1, 0.1, -0.76, -0.84, 0.1, 0.07, -0.6, 0.88, -0.18, 0.22, -0.01, 0.49, 0.94, 0.53, 0.66, -0.51, 0.55, 0.93),
    /* seed C */ Array(-0.72, 0.79, 0.3, 0.57, -0.35, -0.09, -0.45, 0.07, 0.73, 0.06, -0.44, 0.71, 0.8, -0.33, 0.71, 0.55, -0.66, 0.57, -0.52, -0.84, 0.75, -0.66, 0.1, -0.36, 0.15, 0.54, 0.23, 0.87, 0.84, -0.32, -0.42, -0.2, 0.08, 0.34, 0.27, 0.6, 0.93, -0.26, -0.17, -0.7, -0.37, 0.33, -0.14, 0.77, 0.68, -0.85, -0.88, -0.44),
    /* seed D */ Array(-0.52, -0.31, 0.48, -0.74, -0.58, 0.54, -0.36, -0.29, 0.46, 0.94, 0.3, 0.44, -0.06, 0.5, -0.71, 0.89, -0.53, 0.78, 0.86, 0.67, 0.71, -0.14, -0.52, 0.97, -0.54, 0.26, -0.12, 0.05, -0.86, -0.74, -0.82, -0.07, 0.38, 0.59, -0.33, 0.49, 0.63, -0.85, 0.08, 0.82, 0.54, 0.74, 0.59, 0.59, 0.49, -0.61, -1.0, -0.17)
  )

  class GeneticExploration(mutationRate: Double,
                           crossOverRate: Double,
                           population: Int,
                           geneGenerator: () => Gene,
                           geneMutator: Gene => Gene,
                           specimenBuilder: Iterable[Gene] => Specimen,
                           specimenFixer: Specimen => Specimen,
                           fitnessF: Specimen => Long,
                           stopCondition: (Int, List[Specimen]) => Boolean)(implicit ev1: Specimen => Iterable[Gene]) {

    type Pool = List[Specimen]
    type MatePool = List[(Specimen, Long)]

    def newSpecimen(len: Int): Specimen = specimenBuilder(Stream.continually(geneGenerator()).take(len))

    def randomPool(archetype: Specimen, population: Int = population): Pool = {
      (1 to population).map(_ => newSpecimen(archetype.length)).toList
    }

    implicit def toMatePool(p: Pool): MatePool = matePool(p)

    def evolution(pool: MatePool, epoch: Int = 0): (MatePool, Int) = {
      val best = pool.maxBy(_._2)

      // println("---------------------------------------------------------------------------------------")
      println(f"[$epoch] ${best._2}: ${best._1.toList.mkString(", ")}")
      // println("---------------------------------------------------------------------------------------")
      // pool.foreach { case (a, b) => println(s"$b: ${a.toList.mkString(" ")}") }

      val newGeneration = popReproduction(pool)
      if (stopCondition(epoch, newGeneration)) (newGeneration, epoch)
      else evolution(newGeneration, epoch + 1)
    }

    private[this] def matePool(pool: Pool): MatePool = {
      val fitnesses = pool.par.map(fitnessF).toArray
      pool.zip(fitnesses)
    }

    @inline private[this] def renormalize(vector: Array[Long]) = {
      val sum = vector.sum
      vector.map(_.toDouble / sum)
    }

    private[this] def popReproduction(matePool: MatePool): Pool = {
      val normalizedPool = matePool.map(_._1).zip(renormalize(matePool.map(_._2).toArray))

      // Always preserve the better specimen (elitist)
      (matePool.maxBy(_._2)._1 +:
        (1 until population).par.map(_ => crossover(monteCarlo(normalizedPool), monteCarlo(normalizedPool)))
      ).toList
    }

    private[this] def monteCarlo[A](weightedList: List[(A, Double)]): A = {
      def go(xs: List[(A, Double)], r: Double): A = {
        xs match {
          case Nil => throw new IllegalArgumentException("Calling monteCarlo on an empty list!")
          case (h, _) :: Nil => h
          case (h, v) :: t =>
            if (r < v) h
            else go(xs.tail, r - v)
        }
      }
      go(weightedList, Random.nextFloat)
    }

    private[this] def crossover(a: Specimen, b: Specimen): Specimen =
      mutate(specimenBuilder(a.zip(b).map(gene =>
        if (Random.nextFloat >= crossOverRate) gene._1 else gene._2)))

    private[this] def mutate(s: Specimen): Specimen =
      specimenBuilder(s.map(gene =>
        if (mutationRate > Random.nextFloat) geneMutator(gene) else gene))
  }

  def optimize(filenames: Array[String], maxIter: Int) = {
    def fitness(s: Specimen): Long = {
      filenames.map { filename =>
        score(filename, s).score
      }.sum
    }

    val population = 32

    val petri = new GeneticExploration(
      0.1, 0.5, population, // rate of mutation, crossover ratio, max population
      () => (Random.nextDouble() - 0.5) * 2, // random gene pool
      _ => (Random.nextDouble() - 0.5) * 2, // gene mutator
      cs => cs.map(v => (math rint v * 1000) / 1000).toArray, // how to build a specimen from genes
      cs => { val sum = cs.sum; cs.map(_ / sum) },
      fitness, // the fitness function
      (iter, _) => iter > maxIter // the stop condition
    )

    val best = petri.evolution(petri.toMatePool(
      knowledgePool ++ petri.randomPool(Array.fill(hyperparametersLenght)(0.5), population - knowledgePool.length))
    )._1.maxBy(_._2)

    println(f"DONE\tBest Fit ${best._2}\tSpecimen ${best._1.toList}")

    OptimizationResult(best._2, best._1)
  }
}

object OptimizerMain extends App {
  println(GeneticOptimizer.optimize(args, 50))
}
